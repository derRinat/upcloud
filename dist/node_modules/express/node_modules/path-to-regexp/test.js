var pathToRegExp=require("./"),assert=require("assert");describe("path-to-regexp",function(){describe("strings",function(){it("should match simple paths",function(){var e=[],t=pathToRegExp("/test",e).exec("/test");assert.equal(e.length,0),assert.equal(t.length,1),assert.equal(t[0],"/test")}),it("should match express format params",function(){var e=[],t=pathToRegExp("/:test",e).exec("/pathname");assert.equal(e.length,1),assert.equal(e[0].name,"test"),assert.equal(e[0].optional,!1),assert.equal(t.length,2),assert.equal(t[0],"/pathname"),assert.equal(t[1],"pathname")}),it("should do strict matches",function(){var e=[],t=pathToRegExp("/:test",e,{strict:!0}),n;assert.equal(e.length,1),assert.equal(e[0].name,"test"),assert.equal(e[0].optional,!1),n=t.exec("/route"),assert.equal(n.length,2),assert.equal(n[0],"/route"),assert.equal(n[1],"route"),n=t.exec("/route/"),assert.ok(!n)}),it("should do strict matches with trailing slashes",function(){var e=[],t=pathToRegExp("/:test/",e,{strict:!0}),n;assert.equal(e.length,1),assert.equal(e[0].name,"test"),assert.equal(e[0].optional,!1),n=t.exec("/route"),assert.ok(!n),n=t.exec("/route/"),assert.equal(n.length,2),assert.equal(n[0],"/route/"),assert.equal(n[1],"route"),n=t.exec("/route//"),assert.ok(!n)}),it("should allow optional express format params",function(){var e=[],t=pathToRegExp("/:test?",e),n;assert.equal(e.length,1),assert.equal(e[0].name,"test"),assert.equal(e[0].optional,!0),n=t.exec("/route"),assert.equal(n.length,2),assert.equal(n[0],"/route"),assert.equal(n[1],"route"),n=t.exec("/"),assert.equal(n.length,2),assert.equal(n[0],"/"),assert.equal(n[1],undefined)}),it("should allow express format param regexps",function(){var e=[],t=pathToRegExp("/:page(\\d+)",e).exec("/56");assert.equal(e.length,1),assert.equal(e[0].name,"page"),assert.equal(e[0].optional,!1),assert.equal(t.length,2),assert.equal(t[0],"/56"),assert.equal(t[1],"56")}),it("should match without a prefixed slash",function(){var e=[],t=pathToRegExp(":test",e).exec("string");assert.equal(e.length,1),assert.equal(e[0].name,"test"),assert.equal(e[0].optional,!1),assert.equal(t.length,2),assert.equal(t[0],"string"),assert.equal(t[1],"string")}),it("should not match format parts",function(){var e=[],t=pathToRegExp("/:test.json",e).exec("/route.json");assert.equal(e.length,1),assert.equal(e[0].name,"test"),assert.equal(e[0].optional,!1),assert.equal(t.length,2),assert.equal(t[0],"/route.json"),assert.equal(t[1],"route")}),it("should match format parts",function(){var e=[],t=pathToRegExp("/:test.:format",e),n;assert.equal(e.length,2),assert.equal(e[0].name,"test"),assert.equal(e[0].optional,!1),assert.equal(e[1].name,"format"),assert.equal(e[1].optional,!1),n=t.exec("/route.json"),assert.equal(n.length,3),assert.equal(n[0],"/route.json"),assert.equal(n[1],"route"),assert.equal(n[2],"json"),n=t.exec("/route"),assert.ok(!n)}),it("should match route parts with a trailing format",function(){var e=[],t=pathToRegExp("/:test.json",e).exec("/route.json");assert.equal(e.length,1),assert.equal(e[0].name,"test"),assert.equal(e[0].optional,!1),assert.equal(t.length,2),assert.equal(t[0],"/route.json"),assert.equal(t[1],"route")}),it("should match optional trailing routes",function(){var e=[],t=pathToRegExp("/test*",e).exec("/test/route");assert.equal(e.length,0),assert.equal(t.length,2),assert.equal(t[0],"/test/route"),assert.equal(t[1],"/route")}),it("should match optional trailing routes after a param",function(){var e=[],t=pathToRegExp("/:test*",e),n;assert.equal(e.length,1),assert.equal(e[0].name,"test"),assert.equal(e[0].optional,!1),n=t.exec("/test/route"),assert.equal(n.length,3),assert.equal(n[0],"/test/route"),assert.equal(n[1],"test"),assert.equal(n[2],"/route"),n=t.exec("/testing"),assert.equal(n.length,3),assert.equal(n[0],"/testing"),assert.equal(n[1],"testing"),assert.equal(n[2],"")}),it("should match optional trailing routes before a format",function(){var e=[],t=pathToRegExp("/test*.json",e),n;assert.equal(e.length,0),n=t.exec("/test.json"),assert.equal(n.length,2),assert.equal(n[0],"/test.json"),assert.equal(n[1],""),n=t.exec("/testing.json"),assert.equal(n.length,2),assert.equal(n[0],"/testing.json"),assert.equal(n[1],"ing"),n=t.exec("/test/route.json"),assert.equal(n.length,2),assert.equal(n[0],"/test/route.json"),assert.equal(n[1],"/route")}),it("should match optional trailing routes after a param and before a format",function(){var e=[],t=pathToRegExp("/:test*.json",e),n;assert.equal(e.length,1),assert.equal(e[0].name,"test"),assert.equal(e[0].optional,!1),n=t.exec("/testing.json"),assert.equal(n.length,3),assert.equal(n[0],"/testing.json"),assert.equal(n[1],"testing"),assert.equal(n[2],""),n=t.exec("/test/route.json"),assert.equal(n.length,3),assert.equal(n[0],"/test/route.json"),assert.equal(n[1],"test"),assert.equal(n[2],"/route"),n=t.exec(".json"),assert.ok(!n)}),it("should match optional trailing routes between a normal param and a format param",function(){var e=[],t=pathToRegExp("/:test*.:format",e),n;assert.equal(e.length,2),assert.equal(e[0].name,"test"),assert.equal(e[0].optional,!1),assert.equal(e[1].name,"format"),assert.equal(e[1].optional,!1),n=t.exec("/testing.json"),assert.equal(n.length,4),assert.equal(n[0],"/testing.json"),assert.equal(n[1],"testing"),assert.equal(n[2],""),assert.equal(n[3],"json"),n=t.exec("/test/route.json"),assert.equal(n.length,4),assert.equal(n[0],"/test/route.json"),assert.equal(n[1],"test"),assert.equal(n[2],"/route"),assert.equal(n[3],"json"),n=t.exec("/test"),assert.ok(!n),n=t.exec(".json"),assert.ok(!n)}),it("should match optional trailing routes after a param and before an optional format param",function(){var e=[],t=pathToRegExp("/:test*.:format?",e),n;assert.equal(e.length,2),assert.equal(e[0].name,"test"),assert.equal(e[0].optional,!1),assert.equal(e[1].name,"format"),assert.equal(e[1].optional,!0),n=t.exec("/testing.json"),assert.equal(n.length,4),assert.equal(n[0],"/testing.json"),assert.equal(n[1],"testing"),assert.equal(n[2],""),assert.equal(n[3],"json"),n=t.exec("/test/route.json"),assert.equal(n.length,4),assert.equal(n[0],"/test/route.json"),assert.equal(n[1],"test"),assert.equal(n[2],"/route"),assert.equal(n[3],"json"),n=t.exec("/test"),assert.equal(n.length,4),assert.equal(n[0],"/test"),assert.equal(n[1],"test"),assert.equal(n[2],""),assert.equal(n[3],undefined),n=t.exec(".json"),assert.ok(!n)}),it("should match optional trailing routes inside optional express param",function(){var e=[],t=pathToRegExp("/:test*?",e),n;assert.equal(e.length,1),assert.equal(e[0].name,"test"),assert.equal(e[0].optional,!0),n=t.exec("/test/route"),assert.equal(n.length,3),assert.equal(n[0],"/test/route"),assert.equal(n[1],"test"),assert.equal(n[2],"/route"),n=t.exec("/test"),assert.equal(n.length,3),assert.equal(n[0],"/test"),assert.equal(n[1],"test"),assert.equal(n[2],""),n=t.exec("/"),assert.equal(n.length,3),assert.equal(n[0],"/"),assert.equal(n[1],undefined),assert.equal(n[2],undefined)}),it("should do case insensitive matches",function(){var e=pathToRegExp("/test").exec("/TEST");assert.equal(e[0],"/TEST")}),it("should do case sensitive matches",function(){var e=pathToRegExp("/test",null,{sensitive:!0}),t;t=e.exec("/test"),assert.equal(t.length,1),assert.equal(t[0],"/test"),t=e.exec("/TEST"),assert.ok(!t)}),it("should do non-ending matches",function(){var e=[],t=pathToRegExp("/:test",e,{end:!1}).exec("/test/route");assert.equal(e.length,1),assert.equal(e[0].name,"test"),assert.equal(e[0].optional,!1),assert.equal(t.length,2),assert.equal(t[0],"/test"),assert.equal(t[1],"test")}),it("should match trailing slashes in non-ending non-strict mode",function(){var e=[],t=pathToRegExp("/:test",e,{end:!1}),n;assert.equal(e.length,1),assert.equal(e[0].name,"test"),assert.equal(e[0].optional,!1),n=t.exec("/test/"),assert.equal(n.length,2),assert.equal(n[0],"/test/"),assert.equal(n[1],"test")}),it("should match trailing slashes in non-ending non-strict mode",function(){var e=[],t=pathToRegExp("/route/",e,{end:!1}),n;assert.equal(e.length,0),n=t.exec("/route/"),assert.equal(n.length,1),assert.equal(n[0],"/route/"),n=t.exec("/route/test"),assert.equal(n.length,1),assert.equal(n[0],"/route"),n=t.exec("/route"),assert.equal(n.length,1),assert.equal(n[0],"/route"),n=t.exec("/route//"),assert.equal(n.length,1),assert.equal(n[0],"/route/")}),it("should match trailing slashing in non-ending strict mode",function(){var e=[],t=pathToRegExp("/route/",e,{end:!1,strict:!0});assert.equal(e.length,0),m=t.exec("/route/"),assert.equal(m.length,1),assert.equal(m[0],"/route/"),m=t.exec("/route/test"),assert.equal(m.length,1),assert.equal(m[0],"/route/"),m=t.exec("/route"),assert.ok(!m),m=t.exec("/route//"),assert.equal(m.length,1),assert.equal(m[0],"/route/")}),it("should not match trailing slashes in non-ending strict mode",function(){var e=[],t=pathToRegExp("/route",e,{end:!1,strict:!0});assert.equal(e.length,0),m=t.exec("/route"),assert.equal(m.length,1),assert.equal(m[0],"/route"),m=t.exec("/route/"),assert.ok(m.length,1),assert.equal(m[0],"/route")}),it("should match text after an express param",function(){var e=[],t=pathToRegExp("/(:test)route",e);assert.equal(e.length,1),assert.equal(e[0].name,"test"),assert.equal(e[0].optional,!1),m=t.exec("/route"),assert.ok(!m),m=t.exec("/testroute"),assert.equal(m.length,2),assert.equal(m[0],"/testroute"),assert.equal(m[1],"test"),m=t.exec("testroute"),assert.ok(!m)}),it("should match text after an optional express param",function(){var e=[],t=pathToRegExp("/(:test?)route",e),n;assert.equal(e.length,1),assert.equal(e[0].name,"test"),assert.equal(e[0].optional,!0),n=t.exec("/route"),assert.equal(n.length,2),assert.equal(n[0],"/route"),assert.equal(n[1],undefined),n=t.exec("/testroute"),assert.equal(n.length,2),assert.equal(n[0],"/testroute"),assert.equal(n[1],"test"),n=t.exec("route"),assert.ok(!n)}),it("should match optional formats",function(){var e=[],t=pathToRegExp("/:test.:format?",e),n;assert.equal(e.length,2),assert.equal(e[0].name,"test"),assert.equal(e[0].optional,!1),assert.equal(e[1].name,"format"),assert.equal(e[1].optional,!0),n=t.exec("/route"),assert.equal(n.length,3),assert.equal(n[0],"/route"),assert.equal(n[1],"route"),assert.equal(n[2],undefined),n=t.exec("/route.json"),assert.equal(n.length,3),assert.equal(n[0],"/route.json"),assert.equal(n[1],"route"),assert.equal(n[2],"json")}),it("should match full paths with format by default",function(){var e=[],t=pathToRegExp("/:test",e).exec("/test.json");assert.equal(e.length,1),assert.equal(e[0].name,"test"),assert.equal(e[0].optional,!1),assert.equal(t.length,2),assert.equal(t[0],"/test.json"),assert.equal(t[1],"test.json")})}),describe("regexps",function(){it("should return the regexp",function(){assert.deepEqual(pathToRegExp(/.*/),/.*/)})}),describe("arrays",function(){it("should join arrays parts",function(){var e=pathToRegExp(["/test","/route"]);assert.ok(e.test("/test")),assert.ok(e.test("/route")),assert.ok(!e.test("/else"))}),it("should match parts properly",function(){var e=[],t=pathToRegExp(["/:test","/test/:route"],e),n;assert.equal(e.length,2),assert.equal(e[0].name,"test"),assert.equal(e[0].optional,!1),assert.equal(e[1].name,"route"),assert.equal(e[1].optional,!1),n=t.exec("/route"),assert.equal(n.length,3),assert.equal(n[0],"/route"),assert.equal(n[1],"route"),assert.equal(n[2],undefined),n=t.exec("/test/path"),assert.equal(n.length,3),assert.equal(n[0],"/test/path"),assert.equal(n[1],undefined),assert.equal(n[2],"path")})})});
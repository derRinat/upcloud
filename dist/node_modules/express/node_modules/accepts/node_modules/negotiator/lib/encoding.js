function parseAcceptEncoding(e){var t;e?t=e.split(",").map(function(e,t){return parseEncoding(e.trim(),t)}):t=[];if(!t.some(function(e){return e&&specify("identity",e)})){var n=1;for(var r=0;r<t.length;r++){var i=t[r];i&&i.q<n&&(n=i.q)}t.push({encoding:"identity",q:n/2})}return t.filter(function(e){return e})}function parseEncoding(e,t){var n=e.match(/^\s*(\S+?)\s*(?:;(.*))?$/);if(!n)return null;var r=n[1],i=1;if(n[2]){var s=n[2].split(";");for(var t=0;t<s.length;t++){var o=s[t].trim().split("=");if(o[0]==="q"){i=parseFloat(o[1]);break}}}return{encoding:r,q:i,i:t}}function getEncodingPriority(e,t){return t.map(function(t){return specify(e,t)}).filter(Boolean).sort(function(e,t){return e.s==t.s?e.q>t.q?-1:1:e.s>t.s?-1:1})[0]||{s:0,q:0}}function specify(e,t){var n=0;if(t.encoding.toLowerCase()===e.toLowerCase())n|=1;else if(t.encoding!=="*")return null;return{s:n,q:t.q}}function preferredEncodings(e,t){return e=parseAcceptEncoding(e||""),t?t.map(function(t){return[t,getEncodingPriority(t,e)]}).filter(function(e){return e[1].q>0}).sort(function(e,t){var n=e[1],r=t[1];return r.q-n.q||r.s-n.s||n.i-r.i}).map(function(e){return e[0]}):e.sort(function(e,t){return t.q-e.q||e.i-t.i}).filter(function(e){return e.q>0}).map(function(e){return e.encoding})}module.exports=preferredEncodings,preferredEncodings.preferredEncodings=preferredEncodings;